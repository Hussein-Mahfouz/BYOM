library(sf)
data = st_read("itineraire-tdf2018.shp")
data = st_read("itineraire-tdf2018.geojson")
View(data)
plot(st_geometry(data))
library(tidyr)
library(dplyr)
library(readr)
data = read_csv("Summer_Olympic_medallists_1896_2008.csv", skip = 2)
View(data)
data = read_csv("Summer_Olympic_medallists_1896_2008.csv", skip = 3)
View(data)
data = read_csv("Summer_Olympic_medallists_1896_2008.csv", skip = 4)
View(data)
year_best = data %>% group_by(Edition) %>%
summarise(best_country = most.frequent(NOC))
library(dplyr)
year_best = data %>% group_by(Edition) %>%
summarise(best_country = most.frequent(NOC))
year_best = data %>% group_by(Edition) %>%
summarise(best_country = slice(which.max(table(NOC))))
# function to calculate most frequent categorical value  https://exploratory.io/note/kanaugust/1701090969905358
calculate_mode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
year_best = data %>% group_by(Edition) %>%
summarise(best_country = calculate_mode(NOC))
View(year_best)
year_best = data %>% group_by(Edition) %>%
summarise(best_country = calculate_mode(NOC),
medals = count(calculate_mode(NOC)))
year_best = data %>% group_by(Edition) %>%
summarise(best_country = calculate_mode(NOC),
medals = length(which(NOC==calculate_mode(NOC))))
View(year_best)
year_best = data %>% group_by(Edition) %>%
#use function above to get most repeated country
summarise(best_country = calculate_mode(NOC),
# get number of medals won by best country
medals = length(which(NOC==calculate_mode(NOC))))
View(year_best)
View(data)
map = fromJSON("world.geo.json")
library(jsonlite)
map = fromJSON("world.geo.json")
View(map)
map = fromJSON("world.geo.json", flatten = TRUE)
View(map)
map2 = read_sf("world.geo.json")
map2 = read_st("world.geo.json")
map2 = st_read("world.geo.json")
library(sf)
map2 = st_read("world.geo.json")
View(map2)
plot(st_geometry(map2))
View(map2)
sapply(map2, class)
# read in world map as sf
world = st_read("world.geo.json")
View(world)
world[, c("sov_a3", "labelrank")]
#subset only necessary columns
world <- world[, c("sovereignt", "sov_a3", "labelrank")]
#subset only necessary columns
world <- world[, c("sovereignt", "sov_a3")]
plot(st_geometry(world))
# merge map with year_best
x <- merge(world, year_best)
View(x)
x2 <- merge(year_best, world)
View(x2)
x2 <- merge(year_best, world, by.year_best = "best_country", by.world = "sov_a3")
x2 <- merge(year_best, world, by.year_best = "best_country", by.world = "sov_a3", all.year_best = TRUE)
x2 <- left_join(year_best, world, by.year_best = "best_country", by.world = "sov_a3", all.year_best = TRUE)
x2 <- left_join(year_best, world, by = "best_country")
x2 <- left_join(year_best, world, by = c("best_country" = "sov_a3"))
View(x2)
View(x2[[5]][[6]])
View(x2[[5]][[22]])
plot(st_geometry(x2))
x2 <- left_join(world, year_best, by = c("sov_a3" = "best_country"))
View(x2)
# merge map with year_best
x <- merge(world, year_best)
View(x)
filter(x, sov_a3 == year_best)
mteq <- x[x$sov_a3==x$year_best, ]
View(mteq)
x$sov_a3
x$year_best
mteq <- x[x$sov_a3==x$best_country, ]
View(mteq)
View(world)
View(world)
# filter to get only the rows where the spatial data matches the winning country
mteq <- x[x$sovereignt==x$best_country, ]
View(mteq)
View(year_best)
View(data)
# read in world map as sf
world = st_read("world.geo.json")
View(world)
#subset only necessary columns
world <- world[, c("sovereignt", "sov_a3", "gu_a3", "brk_a3", "iso_a3")]
# merge map with year_best
x <- merge(world, year_best)
# filter to get only the rows where the spatial data matches the winning country
mteq <- x[x$iso_a3==x$best_country, ]
View(mteq)
View(year_best)
#subset only necessary columns
world <- world[, c("sovereignt", "iso_a3")]
year_best$best_country[year_best$best_country==GRE]
year_best$best_country[year_best$best_country=='GRE']
year_best$best_country[year_best$best_country=='GRE'] <- 'GRC'
year_best$best_country[year_best$best_country=='URS'] <- 'RUS'
# merge map with year_best
x <- merge(world, year_best)
# filter to get only the rows where the spatial data matches the winning country
mteq <- x[x$iso_a3==x$best_country, ]
View(mteq)
year_best$best_country[year_best$best_country=='GER'] <- 'DEU'
# merge map with year_best
x <- merge(world, year_best)
# filter to get only the rows where the spatial data matches the winning country
mteq <- x[x$iso_a3==x$best_country, ]
# filter to get only the rows where the spatial data matches the winning country
map_winners <- x[x$iso_a3==x$best_country, ]
plot(st_geometry(map_winners))
world <- ggplot() +
borders("world", colour = "gray85", fill = "gray80") +
theme_map()
library(ggplot2)
world <- ggplot() +
borders("world", colour = "gray85", fill = "gray80") +
theme_map()
install.packages("maps")
world <- ggplot() +
borders("world", colour = "gray85", fill = "gray80") +
theme_map()
library(maps)
world <- ggplot() +
borders("world", colour = "gray85", fill = "gray80") +
theme_map()
library(ggthemes)
world <- ggplot() +
borders("world", colour = "gray85", fill = "gray80") +
theme_map()
world
View(map_winners)
o <- ggplot(data=map_winners) +
geom_polygon(aes(x = long, y = lat, group = group, fill=medals, frame = Edition), color="gray90")
o
o <- ggplot(data=map_winners) +
geom_polygon(aes(fill=medals, frame = Edition), color="gray90")
o
View(world)
# read in world map as sf
world = st_read("world.geo.json")
#plot to check
plot(st_geometry(world))
#subset only necessary columns
world <- world[, c("sovereignt", "iso_a3")]
ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals)) +
scale_fill_viridis_c(trans = "sqrt", alpha = .4)
ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals, frame = Edition)) +
scale_fill_viridis_c(trans = "sqrt", alpha = .4)
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals, frame = Edition)) +
scale_fill_viridis_c(trans = "sqrt", alpha = .4)
p
gg_animate(p, "output4020_old.gif")
library(gganimate)
install.packages("gganimate")
library(gganimate)
gg_animate(p, "output4020_old.gif")
gganimate(p, "output4020_old.gif")
anim <- p +
transition_reveal(map_winners$Edition)
animate(anim, fps = 20, width = 1024, height = 951, nframes = 640, end_pause = 40)
anim_save("europe.gif")
anim <- p +
transition_time(map_winners$Edition)
anim_save("europe.gif")
anim
gg_animate(p, "output4020_old.gif"
f
gg_animate(p, "output4020_old.gif")
gganimate(p)
anim <- p +
transition_manual(map_winners$Edition)
animate(anim, fps = 20, width = 1024, height = 951, nframes = 640, end_pause = 40)
anim +
ggtitle('Year {map_winners$Edition}',
subtitle =  = 'Country with Most Medals: {map_winners$sovereignt} ({map_winners$medals})')
anim +
ggtitle('Year {map_winners$Edition}',
subtitle = 'Country with Most Medals: {map_winners$sovereignt} ({map_winners$medals})')
animate(anim, fps = 0.2, width = 1024, height = 951, end_pause = 40)
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals, frame = Edition)) +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
anim <- p +
transition_manual(map_winners$Edition)
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals, frame = Edition)) +
scale_fill_viridis_c(trans = "sqrt", alpha = .4)
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals)) +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
transition_states(Edition, state_length = 2) +
enter_fade() +
exit_fade()
p
install.packages("transformr")
library(transformr)
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals)) +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
transition_states(Edition, state_length = 2) +
enter_fade() +
exit_fade()
p
anim <- p + ggtitle('Year {map_winners$Edition}',
subtitle = 'Country with Most Medals: {map_winners$sovereignt} ({map_winners$medals})')
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals)) +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
transition_states(Edition, state_length = 10) +
enter_fade() +
exit_fade()
anim <- p + ggtitle('Year {map_winners$Edition}',
subtitle = 'Country with Most Medals: {map_winners$sovereignt} ({map_winners$medals})')
anim
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals)) +
labs(title = "{Edition}") +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
transition_states(Edition, state_length = 10) +
enter_fade() +
exit_fade()
p
library(sf)
library(tidyr)
library(dplyr)
library(readr)
library(jsonlite)
library(ggplot2)
library(ggthemes)
library(gganimate)
library(maps)
library(transformr)
data = read_csv("Summer_Olympic_medallists_1896_2008.csv", skip = 4)
# read in world map as sf
world = st_read("world.geo.json")
#subset only necessary columns
world <- world[, c("sovereignt", "iso_a3")]
# function to calculate most frequent categorical value  https://exploratory.io/note/kanaugust/1701090969905358
calculate_mode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
year_best = data %>% group_by(Edition) %>%
summarise(best_country = calculate_mode(NOC),  #use function above to get most repeated country
medals = length(which(NOC==calculate_mode(NOC)))) # get count of medals for best country
year_best$best_country[year_best$best_country=='GRE'] <- 'GRC'
year_best$best_country[year_best$best_country=='URS'] <- 'RUS'
year_best$best_country[year_best$best_country=='GER'] <- 'DEU'
# merge map with year_best
x <- merge(world, year_best)
# filter to get only the rows where the spatial data matches the winning country
map_winners <- x[x$iso_a3==x$best_country, ]
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals)) +
labs(title = "{Edition}") +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
transition_states(Edition, state_length = 10) +
enter_fade() +
exit_fade()
View(p)
p
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals)) +
labs(title = "{Edition}") +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
transition_states(map_winners$Edition, state_length = 3) +
enter_fade() +
exit_fade()
p
warnings()
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals)) +
labs(title = "{closest_state}") +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
transition_states(map_winners$Edition, state_length = 3) +
enter_fade() +
exit_fade()
p
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals)) +
labs(title = "{closest_state}") +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
transition_states(map_winners$Edition, state_length = 15) +
enter_fade() +
exit_fade()
p
p
p
#animate(anim, fps = 0.2, width = 1024, height = 951, end_pause = 40)
anim_save("europe.gif")
animate(p, height = 800, width =800)
anim_save("europe.gif")
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals)) +
labs(title = "{closest_state}") +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
transition_states(map_winners$Edition, state_length = 15) +
enter_fade() +
exit_fade()
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals)) +
labs(title = "{closest_state}") +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
transition_states(map_winners$Edition, state_length = 15) +
enter_fade() +
exit_fade()
animate(p, height = 900, width =1300)
anim_save("europe.gif")
# create new column as ggplot title https://stackoverflow.com/questions/53864892/gganimate-include-additional-variable-other-than-states-level-variable-or-frame
map_winners <- mutate(map_winners, title_var = factor(paste(Edition, sovereignt, sep=" - "), levels = paste(Edition, sovereignt, sep=" - ")))
# create new column as ggplot title https://stackoverflow.com/questions/53864892/gganimate-include-additional-variable-other-than-states-level-variable-or-frame
map_winners <- mutate(map_winners, title_var2, medals = factor(paste(Edition, sovereignt, medals, sep=" - "), levels = paste(Edition, sovereignt, medals, sep=" - ")))
# create new column as ggplot title https://stackoverflow.com/questions/53864892/gganimate-include-additional-variable-other-than-states-level-variable-or-frame
map_winners <- mutate(map_winners, title_var2 = factor(paste(Edition, sovereignt, medals, sep=" - "), levels = paste(Edition, sovereignt, medals, sep=" - ")))
anim_save("europe.gif")
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals)) +
labs(title = "{closest_state} + Medals") +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
transition_states(map_winners$title_var2, state_length = 15) +
enter_fade() +
exit_fade()
animate(p, height = 1100, width =1300, duration = 104, nframes = 26)
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals)) +
labs(title = "{closest_state} Medals") +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
transition_states(map_winners$title_var2, state_length = 15) +
enter_fade() +
exit_fade()
animate(p, height = 1080, width = 1980, duration = 65, nframes = 26)
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals)) +
theme(plot.title = element_text(size = 20, face = "bold"))
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals)) +
theme(plot.title = element_text(size = 20, face = "bold")) +
labs(title = "{closest_state} Medals") +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
transition_states(map_winners$title_var2, state_length = 15) +
enter_fade() +
exit_fade()
animate(p, height = 1080, width = 1980, duration = 65, nframes = 26)
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals)) +
theme(plot.title = element_text(size = 40, face = "bold")) +
labs(title = "{closest_state} Medals") +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
transition_states(map_winners$title_var2, state_length = 15) +
enter_fade() +
exit_fade()
animate(p, height = 1080, width = 1980, duration = 52, nframes = 26)
anim_save("olympics.gif")
animate(p, height = 1080, width = 1980, duration = 52, nframes = 26)
animate(p, height = 560, width = 990, duration = 52, nframes = 26)
anim_save("olympics2.gif")
View(data)
View(data)
View(year_best)
year_best = data %>% group_by(Edition) %>%
summarise(best_country = calculate_mode(NOC),  #use function above to get most repeated country
medals = length(which(NOC==calculate_mode(NOC)))) # get count of medals for best country
year_best = data %>% group_by(Edition) %>%
summarise(best_country = calculate_mode(NOC),  #use function above to get most repeated country
medals = length(which(NOC==calculate_mode(NOC))),
medals2 = length(calculate_mode(NOC)))) # get count of medals for best country
year_best = data %>% group_by(Edition) %>%
summarise(best_country = calculate_mode(NOC),  #use function above to get most repeated country
medals = length(which(NOC==calculate_mode(NOC))),
medals2 = length(calculate_mode(NOC))) # get count of medals for best country
year_best = data %>% group_by(Edition) %>%
summarise(best_country = calculate_mode(NOC),  #use function above to get most repeated country
medals = length(which(NOC==calculate_mode(NOC)))) # get count of medals for best country
sum(year_best$medals)
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals)) +
theme(plot.title = element_text(size = 40, face = "bold")) +
labs(title = "{closest_state} Medals") +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
transition_states(map_winners$title_var2, state_length = 15) +
enter_fade() +
exit_fade()
p <- ggplot(data = world) +
geom_sf() +
geom_sf(data = map_winners, aes(fill = medals)) +
theme(plot.title = element_text(size = 30, face = "bold")) +
labs(title = "{closest_state} Medals") +
scale_fill_viridis_c(trans = "sqrt", alpha = .4) +
transition_states(map_winners$title_var2, state_length = 15) +
enter_fade() +
exit_fade()
animate(p, height = 600, width = 920, duration = 52, nframes = 26)
anim_save("olympics3.gif")
